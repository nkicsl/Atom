var Web3 = require('web3');
var web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
var fs = require('fs');
var readline = require('readline');

var tips = process.argv[2];
var start;
var stop;

var abi = [
	{
		"constant": false,
		"inputs": [
			{
				"name": "_src",
				"type": "string"
			},
			{
				"name": "_action",
				"type": "string"
			}
		],
		"name": "check",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_count",
				"type": "uint256"
			},
			{
				"name": "_src",
				"type": "string"
			},
			{
				"name": "_action",
				"type": "string"
			}
		],
		"name": "equal",
		"outputs": [
			{
				"name": "_result",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_command",
				"type": "string"
			}
		],
		"name": "setCommand",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	}
];
var bytecode = "60806040526040805190810160405280601281526020017f312e312e312e312c27424c4f434b494e4727000000000000000000000000000081525060029080519060200190620000519291906200023f565b5060036005556040805190810160405280600781526020017f312e312e312e310000000000000000000000000000000000000000000000000081525060069080519060200190620000a49291906200023f565b506040805190810160405280600881526020017f53594e5f5245435600000000000000000000000000000000000000000000000081525060079080519060200190620000f29291906200023f565b506040805190810160405280600781526020017f322e322e322e320000000000000000000000000000000000000000000000000081525060089080519060200190620001409291906200023f565b506040805190810160405280600881526020017f53594e5f52454356000000000000000000000000000000000000000000000000815250600990805190602001906200018e9291906200023f565b506040805190810160405280600781526020017f332e332e332e3300000000000000000000000000000000000000000000000000815250600a9080519060200190620001dc9291906200023f565b506040805190810160405280600881526020017f53594e5f52454356000000000000000000000000000000000000000000000000815250600b90805190602001906200022a9291906200023f565b503480156200023857600080fd5b50620002ee565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028257805160ff1916838001178555620002b3565b82800160010185558215620002b3579182015b82811115620002b257825182559160200191906001019062000295565b5b509050620002c29190620002c6565b5090565b620002eb91905b80821115620002e7576000816000905550600101620002cd565b5090565b90565b610a3280620002fe6000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063725dbc401461005c578063cadf09981461010b578063dfa71d6b146101dc575b600080fd5b34801561006857600080fd5b50610109600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610245565b005b34801561011757600080fd5b506101c260048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061075b565b604051808215151515815260200191505060405180910390f35b3480156101e857600080fd5b50610243600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610947565b005b816003600080548152602001908152602001600020908051906020019061026d929190610961565b508060046000805481526020019081526020016000209080519060200190610296929190610961565b5060008081548092919060010191905055506005546000541015156106a7576103f660005460068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103515780601f1061032657610100808354040283529160200191610351565b820191906000526020600020905b81548152906001019060200180831161033457829003601f168201915b505050505060078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103ec5780601f106103c1576101008083540402835291602001916103ec565b820191906000526020600020905b8154815290600101906020018083116103cf57829003601f168201915b505050505061075b565b8015610542575061054160016000540360088054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561049c5780601f106104715761010080835404028352916020019161049c565b820191906000526020600020905b81548152906001019060200180831161047f57829003601f168201915b505050505060098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105375780601f1061050c57610100808354040283529160200191610537565b820191906000526020600020905b81548152906001019060200180831161051a57829003601f168201915b505050505061075b565b5b801561068e575061068d600260005403600a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105e85780601f106105bd576101008083540402835291602001916105e8565b820191906000526020600020905b8154815290600101906020018083116105cb57829003601f168201915b5050505050600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106835780601f1061065857610100808354040283529160200191610683565b820191906000526020600020905b81548152906001019060200180831161066657829003601f168201915b505050505061075b565b5b156106a6576001600081548092919060010191905055505b5b60055460015414156107575761075660028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561074c5780601f106107215761010080835404028352916020019161074c565b820191906000526020600020905b81548152906001019060200180831161072f57829003601f168201915b5050505050610947565b5b5050565b6000809050826040518082805190602001908083835b6020831015156107965780518252602082019150602081019050602083039250610771565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166003600086815260200190815260200160002060405180828054600181600116156101000203166002900480156108355780601f10610813576101008083540402835291820191610835565b820191906000526020600020905b815481529060010190602001808311610821575b50509150506040518091039020600019161480156109365750816040518082805190602001908083835b602083101515610884578051825260208201915060208101905060208303925061085f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166004600086815260200190815260200160002060405180828054600181600116156101000203166002900480156109235780601f10610901576101008083540402835291820191610923565b820191906000526020600020905b81548152906001019060200180831161090f575b5050915050604051809103902060001916145b1561094057600190505b9392505050565b806002908051906020019061095d929190610961565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106109a257805160ff19168380011785556109d0565b828001600101855582156109d0579182015b828111156109cf5782518255916020019190600101906109b4565b5b5090506109dd91906109e1565b5090565b610a0391905b808211156109ff5760008160009055506001016109e7565b5090565b905600a165627a7a72305820faf126e990c6b6ac278112eb9dde94345bd8184a886e61eb5fe8cdf36023bdff0029";

function getModifyTime() {
    current = new Date().getTime();
	fs.appendFile("./time.txt", (current - start).toString() + '\n', function (err) {
		if (err) { throw err; }
	})
}

async function deploy(tips){
    start = new Date().getTime();
    for(i = 1; i <= tips; i++){
        var Contract = new web3.eth.Contract(abi).deploy({ data: bytecode }).send({ from: accounts[0], gasLimit: 500000 }).on('receipt', function(receipt){
			console.log(receipt) 
		 });
        console.log("deploy of No.%o contract success!", i);
        if((i % 500) == 0){
            getModifyTime();
        }
    }
}

async function main(){
    //await Ut.sleep(100);
    accounts = await web3.eth.getAccounts();
    //console.log(accounts[0]);
    console.log("get accounts success!");
    deploy(tips);
}

main();